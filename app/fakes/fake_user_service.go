// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"clerks/domain"
	"sync"
)

type FakeUserService struct {
	GetUsersStub        func(string, int, int) ([]domain.User, int, int, error)
	getUsersMutex       sync.RWMutex
	getUsersArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	getUsersReturns struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}
	getUsersReturnsOnCall map[int]struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}
	PopulateStub        func() error
	populateMutex       sync.RWMutex
	populateArgsForCall []struct {
	}
	populateReturns struct {
		result1 error
	}
	populateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserService) GetUsers(arg1 string, arg2 int, arg3 int) ([]domain.User, int, int, error) {
	fake.getUsersMutex.Lock()
	ret, specificReturn := fake.getUsersReturnsOnCall[len(fake.getUsersArgsForCall)]
	fake.getUsersArgsForCall = append(fake.getUsersArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetUsersStub
	fakeReturns := fake.getUsersReturns
	fake.recordInvocation("GetUsers", []interface{}{arg1, arg2, arg3})
	fake.getUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeUserService) GetUsersCallCount() int {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	return len(fake.getUsersArgsForCall)
}

func (fake *FakeUserService) GetUsersCalls(stub func(string, int, int) ([]domain.User, int, int, error)) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = stub
}

func (fake *FakeUserService) GetUsersArgsForCall(i int) (string, int, int) {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	argsForCall := fake.getUsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserService) GetUsersReturns(result1 []domain.User, result2 int, result3 int, result4 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	fake.getUsersReturns = struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeUserService) GetUsersReturnsOnCall(i int, result1 []domain.User, result2 int, result3 int, result4 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	if fake.getUsersReturnsOnCall == nil {
		fake.getUsersReturnsOnCall = make(map[int]struct {
			result1 []domain.User
			result2 int
			result3 int
			result4 error
		})
	}
	fake.getUsersReturnsOnCall[i] = struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeUserService) Populate() error {
	fake.populateMutex.Lock()
	ret, specificReturn := fake.populateReturnsOnCall[len(fake.populateArgsForCall)]
	fake.populateArgsForCall = append(fake.populateArgsForCall, struct {
	}{})
	stub := fake.PopulateStub
	fakeReturns := fake.populateReturns
	fake.recordInvocation("Populate", []interface{}{})
	fake.populateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserService) PopulateCallCount() int {
	fake.populateMutex.RLock()
	defer fake.populateMutex.RUnlock()
	return len(fake.populateArgsForCall)
}

func (fake *FakeUserService) PopulateCalls(stub func() error) {
	fake.populateMutex.Lock()
	defer fake.populateMutex.Unlock()
	fake.PopulateStub = stub
}

func (fake *FakeUserService) PopulateReturns(result1 error) {
	fake.populateMutex.Lock()
	defer fake.populateMutex.Unlock()
	fake.PopulateStub = nil
	fake.populateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) PopulateReturnsOnCall(i int, result1 error) {
	fake.populateMutex.Lock()
	defer fake.populateMutex.Unlock()
	fake.PopulateStub = nil
	if fake.populateReturnsOnCall == nil {
		fake.populateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.populateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	fake.populateMutex.RLock()
	defer fake.populateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserService = new(FakeUserService)
