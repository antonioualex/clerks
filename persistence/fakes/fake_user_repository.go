// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"clerks/domain"
	"sync"
)

type FakeUserRepository struct {
	AddUsersStub        func([]domain.User) error
	addUsersMutex       sync.RWMutex
	addUsersArgsForCall []struct {
		arg1 []domain.User
	}
	addUsersReturns struct {
		result1 error
	}
	addUsersReturnsOnCall map[int]struct {
		result1 error
	}
	GetUsersStub        func(string, int, int) ([]domain.User, int, int, error)
	getUsersMutex       sync.RWMutex
	getUsersArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	getUsersReturns struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}
	getUsersReturnsOnCall map[int]struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepository) AddUsers(arg1 []domain.User) error {
	var arg1Copy []domain.User
	if arg1 != nil {
		arg1Copy = make([]domain.User, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.addUsersMutex.Lock()
	ret, specificReturn := fake.addUsersReturnsOnCall[len(fake.addUsersArgsForCall)]
	fake.addUsersArgsForCall = append(fake.addUsersArgsForCall, struct {
		arg1 []domain.User
	}{arg1Copy})
	stub := fake.AddUsersStub
	fakeReturns := fake.addUsersReturns
	fake.recordInvocation("AddUsers", []interface{}{arg1Copy})
	fake.addUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) AddUsersCallCount() int {
	fake.addUsersMutex.RLock()
	defer fake.addUsersMutex.RUnlock()
	return len(fake.addUsersArgsForCall)
}

func (fake *FakeUserRepository) AddUsersCalls(stub func([]domain.User) error) {
	fake.addUsersMutex.Lock()
	defer fake.addUsersMutex.Unlock()
	fake.AddUsersStub = stub
}

func (fake *FakeUserRepository) AddUsersArgsForCall(i int) []domain.User {
	fake.addUsersMutex.RLock()
	defer fake.addUsersMutex.RUnlock()
	argsForCall := fake.addUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUserRepository) AddUsersReturns(result1 error) {
	fake.addUsersMutex.Lock()
	defer fake.addUsersMutex.Unlock()
	fake.AddUsersStub = nil
	fake.addUsersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) AddUsersReturnsOnCall(i int, result1 error) {
	fake.addUsersMutex.Lock()
	defer fake.addUsersMutex.Unlock()
	fake.AddUsersStub = nil
	if fake.addUsersReturnsOnCall == nil {
		fake.addUsersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addUsersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) GetUsers(arg1 string, arg2 int, arg3 int) ([]domain.User, int, int, error) {
	fake.getUsersMutex.Lock()
	ret, specificReturn := fake.getUsersReturnsOnCall[len(fake.getUsersArgsForCall)]
	fake.getUsersArgsForCall = append(fake.getUsersArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetUsersStub
	fakeReturns := fake.getUsersReturns
	fake.recordInvocation("GetUsers", []interface{}{arg1, arg2, arg3})
	fake.getUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeUserRepository) GetUsersCallCount() int {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	return len(fake.getUsersArgsForCall)
}

func (fake *FakeUserRepository) GetUsersCalls(stub func(string, int, int) ([]domain.User, int, int, error)) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = stub
}

func (fake *FakeUserRepository) GetUsersArgsForCall(i int) (string, int, int) {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	argsForCall := fake.getUsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) GetUsersReturns(result1 []domain.User, result2 int, result3 int, result4 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	fake.getUsersReturns = struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeUserRepository) GetUsersReturnsOnCall(i int, result1 []domain.User, result2 int, result3 int, result4 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	if fake.getUsersReturnsOnCall == nil {
		fake.getUsersReturnsOnCall = make(map[int]struct {
			result1 []domain.User
			result2 int
			result3 int
			result4 error
		})
	}
	fake.getUsersReturnsOnCall[i] = struct {
		result1 []domain.User
		result2 int
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeUserRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addUsersMutex.RLock()
	defer fake.addUsersMutex.RUnlock()
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.UserRepository = new(FakeUserRepository)
